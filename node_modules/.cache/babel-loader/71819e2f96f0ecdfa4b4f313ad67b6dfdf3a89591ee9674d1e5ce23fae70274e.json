{"ast":null,"code":"var _jsxFileName = \"/home/tlb/repos/movie-browser-app/src/MoviePage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://www.omdbapi.com?apikey=46cefbd4';\nconst MoviePage = () => {\n  _s();\n  const {\n    imdbID\n  } = useParams();\n  const [data, setDate] = useState();\n  const loadMovie = async id => {\n    try {\n      const response = await fetch(`${API_URL}&i=${id}&plot=full`);\n      if (response.ok) {\n        const movieData = await response;\n        setDate(movieData);\n      } else {\n        console.error(\"Error fetching movie data:\", response.status);\n      }\n    } catch (error) {\n      console.error(\"Error fetching movie data:\", error);\n    }\n  };\n  useEffect(() => {\n    console.log(data);\n    loadMovie(imdbID);\n  }, [imdbID]);\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Rest of your component code\n  // ...\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"body\", {\n      className: \"flex justify-center items-center bg-indigo-900 min-h-screen w-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between bg-gray-500 w-[1600px] h-[700px] rounded-xl\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ml-16 mt-10 h-full\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-col gap-3 mb-10\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"text-5xl text-yellow-600\",\n              children: data.Title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-2xl text-yellow-600 opacity-70\",\n              children: data.Year\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-col gap-3 w-[1000px] text-xl bg-clip-text bg-gradient-to-r from-yellow-600 to-gray-300 text-transparent\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"director : \", data.Director]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"type : \", data.Type]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Rated : \", data.Rated]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"release date \", data.Released]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 29\n            }, this), (data === null || data === void 0 ? void 0 : data.Type) === 'movie' ? /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"movie duration : \", data.Runtime, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 58\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"duration of each episode : \", data.Runtime]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 106\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Genre : \", data.Genre]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Writers : \", data.Writer]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Actors : \", data.Actors]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"story :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \" text-ellipsis whitespace-normal overflow-hidden\",\n              children: data.Plot\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-full mx-3 flex items-center w-[450px]\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"h-[95%] rounded-xl\",\n            src: data.Poster !== 'N/A' ? data.Poster : 'https://via.placeholder.com/400',\n            alt: data.Title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(MoviePage, \"yIhEjqrnxJuDClIQW8grMhO8LkY=\", false, function () {\n  return [useParams];\n});\n_c = MoviePage;\nexport default MoviePage;\n\n// import React, { useEffect, useState } from \"react\";\n\n// import { useParams } from \"react-router-dom\";\n\n// const API_URL = 'http://www.omdbapi.com?apikey=46cefbd4';\n\n// const MoviePage = () => {\n\n//     const { imdbID } = useParams();\n\n//     const [data , setDate] = useState();\n\n//     const loadMovie = async (title) => {\n//         const response = await fetch(`${API_URL}&t=${title}&plot=full`);\n\n//         console.log(response);\n\n//         setDate(response);\n//     }\n\n//       useEffect(() => {\n\n//         console.log(movie)\n//         loadMovie(movie.Title);\n\n//       } , [])\n\n// return(\n//     <>\n//         <body className=\"flex justify-center items-center bg-indigo-900 min-h-screen w-screen\">\n//             <div className=\"flex justify-between bg-gray-500 w-[1600px] h-[700px] rounded-xl\">\n//                 <div className=\"ml-16 mt-10 h-full\">\n//                     <div className=\"flex flex-col gap-3 mb-10\">\n//                         <h1 className=\"text-5xl text-yellow-600\">{data.Title}</h1>\n//                         <h2 className=\"text-2xl text-yellow-600 opacity-70\">{data.Year}</h2>\n//                     </div>\n\n//                     <div className=\"flex flex-col gap-3 w-[1000px] text-xl bg-clip-text bg-gradient-to-r from-yellow-600 to-gray-300 text-transparent\">\n//                         <span>director : {data.Director}</span>\n//                         <span>type : {data.Type}</span>\n//                         <span>Rated : {data.Rated}</span>\n//                         <span>release date {data.Released}</span>\n//                         {\n//                             data?.Type === 'movie' ? <span>movie duration : {data.Runtime} </span> : <span>duration of each episode : {data.Runtime}</span>\n//                         }\n//                         <span>Genre : {data.Genre}</span>\n//                         <span>Writers : {data.Writer}</span>\n//                         <span>Actors : {data.Actors}</span>\n//                         <span >story :</span>\n//                         <span className=\" text-ellipsis whitespace-normal overflow-hidden\">{data.Plot}</span>\n\n//                     </div>\n//                 </div>\n\n//                 <div className=\"h-full mx-3 flex items-center w-[450px]\">\n//                     <img className=\"h-[95%] rounded-xl\" src={data.Poster !== 'N/A' ? data.Poster : 'https://via.placeholder.com/400'} alt={data.Title} />\n//                 </div>\n//             </div>\n\n//         </body>\n//     </>\n\n// )\n// }\n\n// export default MoviePage;\nvar _c;\n$RefreshReg$(_c, \"MoviePage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","MoviePage","_s","imdbID","data","setDate","loadMovie","id","response","fetch","ok","movieData","console","error","status","log","children","fileName","_jsxFileName","lineNumber","columnNumber","className","Title","Year","Director","Type","Rated","Released","Runtime","Genre","Writer","Actors","Plot","src","Poster","alt","_c","$RefreshReg$"],"sources":["/home/tlb/repos/movie-browser-app/src/MoviePage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nconst API_URL = 'http://www.omdbapi.com?apikey=46cefbd4';\n\nconst MoviePage = () => {\n    const { imdbID } = useParams();\n    const [data, setDate] = useState();\n\n    const loadMovie = async (id) => {\n        try {\n            const response = await fetch(`${API_URL}&i=${id}&plot=full`);\n            if (response.ok) {  \n                const movieData = await response;\n                setDate(movieData);\n            } else {\n                console.error(\"Error fetching movie data:\", response.status);\n            }\n        } catch (error) {\n            console.error(\"Error fetching movie data:\", error);\n        }\n    }\n\n    useEffect(() => {\n        console.log(data)\n        loadMovie(imdbID);\n    }, [imdbID]);\n\n    if (!data) {\n        return <div>Loading...</div>;\n    }\n\n    // Rest of your component code\n    // ...\n\n    return (\n        <>\n            <body className=\"flex justify-center items-center bg-indigo-900 min-h-screen w-screen\">\n                <div className=\"flex justify-between bg-gray-500 w-[1600px] h-[700px] rounded-xl\">\n                    <div className=\"ml-16 mt-10 h-full\">\n                        <div className=\"flex flex-col gap-3 mb-10\">\n                            <h1 className=\"text-5xl text-yellow-600\">{data.Title}</h1>\n                            <h2 className=\"text-2xl text-yellow-600 opacity-70\">{data.Year}</h2>\n                        </div>\n                        \n                        <div className=\"flex flex-col gap-3 w-[1000px] text-xl bg-clip-text bg-gradient-to-r from-yellow-600 to-gray-300 text-transparent\">\n                            <span>director : {data.Director}</span>\n                            <span>type : {data.Type}</span>\n                            <span>Rated : {data.Rated}</span>\n                            <span>release date {data.Released}</span>\n                            {\n                                data?.Type === 'movie' ? <span>movie duration : {data.Runtime} </span> : <span>duration of each episode : {data.Runtime}</span>\n                            }\n                            <span>Genre : {data.Genre}</span>\n                            <span>Writers : {data.Writer}</span>\n                            <span>Actors : {data.Actors}</span>\n                            <span >story :</span>\n                            <span className=\" text-ellipsis whitespace-normal overflow-hidden\">{data.Plot}</span>\n                            \n                        </div>\n                    </div>\n\n                    <div className=\"h-full mx-3 flex items-center w-[450px]\">\n                        <img className=\"h-[95%] rounded-xl\" src={data.Poster !== 'N/A' ? data.Poster : 'https://via.placeholder.com/400'} alt={data.Title} />\n                    </div>\n                </div>\n                \n            </body>\n        </>\n    );\n}\n\nexport default MoviePage;\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from \"react\";\n\n// import { useParams } from \"react-router-dom\";\n\n\n// const API_URL = 'http://www.omdbapi.com?apikey=46cefbd4';\n\n\n// const MoviePage = () => {\n    \n//     const { imdbID } = useParams();\n      \n//     const [data , setDate] = useState();\n\n//     const loadMovie = async (title) => {\n//         const response = await fetch(`${API_URL}&t=${title}&plot=full`);\n\n        \n//         console.log(response);\n\n//         setDate(response);\n//     }\n\n//       useEffect(() => {\n        \n//         console.log(movie)\n//         loadMovie(movie.Title);\n\n//       } , [])\n    \n\n    // return(\n    //     <>\n    //         <body className=\"flex justify-center items-center bg-indigo-900 min-h-screen w-screen\">\n    //             <div className=\"flex justify-between bg-gray-500 w-[1600px] h-[700px] rounded-xl\">\n    //                 <div className=\"ml-16 mt-10 h-full\">\n    //                     <div className=\"flex flex-col gap-3 mb-10\">\n    //                         <h1 className=\"text-5xl text-yellow-600\">{data.Title}</h1>\n    //                         <h2 className=\"text-2xl text-yellow-600 opacity-70\">{data.Year}</h2>\n    //                     </div>\n                        \n    //                     <div className=\"flex flex-col gap-3 w-[1000px] text-xl bg-clip-text bg-gradient-to-r from-yellow-600 to-gray-300 text-transparent\">\n    //                         <span>director : {data.Director}</span>\n    //                         <span>type : {data.Type}</span>\n    //                         <span>Rated : {data.Rated}</span>\n    //                         <span>release date {data.Released}</span>\n    //                         {\n    //                             data?.Type === 'movie' ? <span>movie duration : {data.Runtime} </span> : <span>duration of each episode : {data.Runtime}</span>\n    //                         }\n    //                         <span>Genre : {data.Genre}</span>\n    //                         <span>Writers : {data.Writer}</span>\n    //                         <span>Actors : {data.Actors}</span>\n    //                         <span >story :</span>\n    //                         <span className=\" text-ellipsis whitespace-normal overflow-hidden\">{data.Plot}</span>\n                            \n    //                     </div>\n    //                 </div>\n\n    //                 <div className=\"h-full mx-3 flex items-center w-[450px]\">\n    //                     <img className=\"h-[95%] rounded-xl\" src={data.Poster !== 'N/A' ? data.Poster : 'https://via.placeholder.com/400'} alt={data.Title} />\n    //                 </div>\n    //             </div>\n                \n    //         </body>\n    //     </>\n        \n    // )\n// }\n\n// export default MoviePage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}